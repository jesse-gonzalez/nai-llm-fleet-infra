{{ $cluster := (ds "config").k8s_cluster -}}
{{ $flux := (ds "config").flux -}}
{{ $infra := (ds "config").infra -}}
{{ $services := (ds "config").services -}}
{{ $apps := (ds "config").apps -}}
{{ $nutanix := $infra.nutanix -}}
kind: ConfigMap
apiVersion: v1
metadata:
  name: cluster-configs
data:
  cluster_name: "{{ $cluster.name | required }}"
  environment: "{{ $cluster.environment | required }}"
  cluster_profile: "{{ $cluster.profile | required }}"
{{- if $cluster.gpu_operator.enabled }}
  gpu_cuda_toolkit_version: "{{ $cluster.gpu_operator.cuda_toolkit_version | default "v1.14.3-centos7" }}"
  gpu_operator_version: "{{with $cluster.gpu_operator.version | default .Env.GPU_OPERATOR_VERSION }}{{.}}{{end}}"
{{- if $cluster.gpu_operator.time_slicing.enabled }}
  gpu_time_slicing_replica_count: "{{ $cluster.gpu_operator.time_slicing.replica_count | default "2" }}"
{{- end }}
{{- end }}
{{- if $services.kube_vip.enabled }}  
  kube_vip_ipam_range: "{{with $services.kube_vip.ipam_range | required }}{{.}}{{end}}"
{{- if $services.nginx_ingress.enabled }}
  kube_vip_nginx_ingress_ipam: "{{with $services.nginx_ingress.vip | required }}{{.}}/32{{end}}"
  wildcard_ingress_subdomain: "{{with $services.nginx_ingress.wildcard_ingress_subdomain | required }}{{.}}{{end}}"
  management_cluster_ingress_subdomain: "{{with $services.nginx_ingress.management_cluster_ingress_subdomain | required }}{{.}}{{end}}"
{{- end }}
{{- if $services.istio.enabled }}
  kube_vip_istio_system_ipam: "{{with $services.istio.vip | required }}{{.}}/32{{end}}"
  istio_wildcard_ingress_subdomain: "{{with $services.istio.wildcard_ingress_subdomain | required }}{{.}}{{end}}"
  istio_version: "{{with $services.istio.vip | default (getenv "ISTIO_VERSION") }}{{.}}{{end}}"
{{- end }}
{{- end }}
{{- if $services.cert_manager.enabled }}
  cert_manager_version: "{{with $services.cert_manager.version | default .Env.CERT_MANAGER_VERSION }}{{.}}{{end}}"
{{- if $services.cert_manager.aws_route53_acme_dns.enabled }}
  aws_route53_dns_zone: "{{with $services.cert_manager.aws_route53_acme_dns.zone | required }}{{.}}{{end}}"
  aws_route53_region: "{{with $services.cert_manager.aws_route53_acme_dns.region | required }}{{.}}{{end}}"
  cert_manager_issuer_name: "letsencrypt-issuer"
{{- else }}
  cert_manager_issuer_name: "selfsigned-cluster-issuer"
{{- end }}
{{- end }}
{{- if $nutanix.prism_central.enabled }}  
{{- if $nutanix.objects.enabled }}
  objects_host: "{{with $nutanix.objects.host | required }}{{.}}{{end}}"
  objects_port: "{{with $nutanix.objects.port | default "80" }}{{.}}{{end}}"
  objects_region: "{{with $nutanix.objects.region | default "us-east-1" }}{{.}}{{end}}"
  objects_use_ssl: "{{with $nutanix.objects.use_ssl | default "false" }}{{.}}{{end}}"
{{- end }}
{{- end }}
{{- if $apps.gptnvd_reference_app.enabled }}
{{- if $nutanix.objects.enabled }}
  milvus_objects_bucket_name: "{{with $apps.gptnvd_reference_app.milvus_bucket_name | required }}{{.}}{{end}}"
  documents_objects_bucket_name: "{{with $apps.gptnvd_reference_app.documents_bucket_name | required }}{{.}}{{end}}"
{{- end }}
{{- end }}
{{- if $apps.nai_helm.enabled }}
  model: "{{with $apps.nai_helm.model | required }}{{.}}{{end}}"
  revision: "{{with $apps.nai_helm.revision | required }}{{.}}{{end}}"
  maxTokens: "{{with $apps.nai_helm.maxTokens | required }}{{.}}{{end}}"
  repPenalty: "{{with $apps.nai_helm.repPenalty | required }}{{.}}{{end}}"
  temperature: "{{with $apps.nai_helm.temperature | required }}{{.}}{{end}}"
  topP: "{{with $apps.nai_helm.topP | required }}{{.}}{{end}}"
  useExistingNFS: "{{with $apps.nai_helm.useExistingNFS | default "false" }}{{.}}{{end}}"
{{- if $apps.nai_helm.useExistingNFS }}
  nfs_export: "{{with $apps.nai_helm.nfs_export | required }}{{.}}{{end}}"
  nfs_server: "{{with $apps.nai_helm.nfs_server | required }}{{.}}{{end}}"
{{- end }}
{{- end }}
  knative_serving_version: "{{with $services.knative_serving.version | default (getenv "KNATIVE_SERVING_VERSION") }}{{.}}{{end}}"
  knative_istio_version: "{{with $services.knative_istio.version | default (getenv "KNATIVE_ISTIO_VERSION") }}{{.}}{{end}}"
  kserve_version: "{{with $services.kserve.version | default .Env.KSERVE_VERSION }}{{.}}{{end}}"
  kafka_version: "{{with $services.kafka.version | default .Env.KAFKA_VERSION }}{{.}}{{end}}"
  kubernetes_dashboard_version: "{{with $services.kubernetes_dashboard.version | default .Env.KUBERNETES_DASHBOARD_VERSION }}{{.}}{{end}}"
  kyverno_version: "{{with $services.kyverno.version | default .Env.KYVERNO_VERSION }}{{.}}{{end}}"
  milvus_version: "{{with $services.milvus.version | default .Env.MILVUS_VERSION }}{{.}}{{end}}"
  opentelemetry_collector_version: "{{with $services.opentelemetry_collector.version | default .Env.OPENTELEMETRY_COLLECTOR_VERSION }}{{.}}{{end}}"
  opentelemetry_operator_version: "{{with $services.opentelemetry_operator.version | default .Env.OPENTELEMETRY_OPERATOR_VERSION }}{{.}}{{end}}"
  uptrace_version: "{{with $services.uptrace.version | default .Env.UPTRACE_VERSION }}{{.}}{{end}}"
  weave_gitops_version: "{{with $services.weave_gitops.version | default .Env.WEAVE_GITOPS_VERSION }}{{.}}{{end}}"
  jupyterhub_version: "{{with $services.jupyterhub.version | default .Env.JUPYTERHUB_VERSION }}{{.}}{{end}}"
  nginx_ingress_version: "{{with $services.nginx_ingress.version | default .Env.NGINX_INGRESS_VERSION }}{{.}}{{end}}"
  elasticsearch_version: "{{with $services.elasticsearch.version | default .Env.ELASTICSEARCH_VERSION }}{{.}}{{end}}"
  redis_version: "{{with $services.redis.version | default .Env.REDIS_VERSION }}{{.}}{{end}}"
